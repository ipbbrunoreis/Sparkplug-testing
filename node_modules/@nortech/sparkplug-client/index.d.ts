/// <reference types="node" />
/**
 * Copyright (c) 2016-2017 Cirrus Link Solutions
 *
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  which accompanies this distribution, and is available at
 *  http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Cirrus Link Solutions
 */
import events from 'events';
import type { IClientOptions } from 'mqtt';
export declare type ISparkplugClientOptions = {
    serverUrl: string;
    username: string;
    password: string;
    groupId: string;
    edgeNode: string;
    clientId: string;
    publishDeath?: boolean;
    version?: string;
    keepalive?: number;
    mqttOptions?: Omit<IClientOptions, 'clientId' | 'clean' | 'keepalive' | 'reschedulePings' | 'connectTimeout' | 'username' | 'password' | 'will'>;
};
declare class SparkplugClient extends events.EventEmitter {
    private readonly type_int32;
    private readonly type_boolean;
    private readonly type_string;
    private readonly versionB;
    private serverUrl;
    private groupId;
    private edgeNode;
    private publishDeath;
    private version;
    private mqttOptions;
    private bdSeq;
    private seq;
    private devices;
    private client;
    private connecting;
    private connected;
    constructor(config: ISparkplugClientOptions);
    private incrementSeqNum;
    private encodePayload;
    private decodePayload;
    private addSeqNumber;
    private getDeathPayload;
    private publishNDeath;
    private messageAlert;
    private compressPayload;
    private maybeCompressPayload;
    private maybeDecompressPayload;
    subscribeTopic(topic: string, options?: {
        qos: number;
    }, callback?: any): void;
    unsubscribeTopic(topic: string, options?: any, callback?: any): void;
    publishNodeBirth(payload: any, options: any): void;
    publishNodeData(payload: any, options: any): void;
    publishDeviceData(deviceId: any, payload: any, options: any): void;
    publishDeviceBirth(deviceId: any, payload: any, options: any): void;
    publishDeviceDeath(deviceId: any, payload: any): void;
    stop(cb?: (err: Error) => void): void;
    private init;
}
export declare function newClient(config: ISparkplugClientOptions): SparkplugClient;
export declare function maybeDecompressPayload(payload: {
    uuid?: string;
}): any;
export {};
